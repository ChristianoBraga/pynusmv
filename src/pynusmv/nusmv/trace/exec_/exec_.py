# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_exec_', [dirname(__file__)])
        except ImportError:
            import _exec_
            return _exec_
        if fp is not None:
            try:
                _mod = imp.load_module('_exec_', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _exec_ = swig_import_helper()
    del swig_import_helper
else:
    import _exec_
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


PRIuPTR = _exec_.PRIuPTR
PRIdPTR = _exec_.PRIdPTR
LLU = _exec_.LLU
LLO = _exec_.LLO
LLX = _exec_.LLX
false = _exec_.false
true = _exec_.true
OUTCOME_GENERIC_ERROR = _exec_.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _exec_.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _exec_.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _exec_.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _exec_.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _exec_.OUTCOME_SUCCESS

def Object_destroy(*args) -> "void" :
  """Object_destroy(Object_ptr self, void * arg)"""
  return _exec_.Object_destroy(*args)

def Object_copy(*args) -> "Object_ptr" :
  """Object_copy(Object_ptr const self) -> Object_ptr"""
  return _exec_.Object_copy(*args)

def BaseTraceExecutor_get_verbosity(*args) -> "int" :
  """BaseTraceExecutor_get_verbosity(BaseTraceExecutor_ptr self) -> int"""
  return _exec_.BaseTraceExecutor_get_verbosity(*args)

def BaseTraceExecutor_set_verbosity(*args) -> "void" :
  """BaseTraceExecutor_set_verbosity(BaseTraceExecutor_ptr self, int verbosity)"""
  return _exec_.BaseTraceExecutor_set_verbosity(*args)

def BaseTraceExecutor_get_output_stream(*args) -> "FILE *" :
  """BaseTraceExecutor_get_output_stream(BaseTraceExecutor_ptr self) -> FILE *"""
  return _exec_.BaseTraceExecutor_get_output_stream(*args)

def BaseTraceExecutor_set_output_stream(*args) -> "void" :
  """BaseTraceExecutor_set_output_stream(BaseTraceExecutor_ptr self, FILE * error_stream)"""
  return _exec_.BaseTraceExecutor_set_output_stream(*args)

def BaseTraceExecutor_get_error_stream(*args) -> "FILE *" :
  """BaseTraceExecutor_get_error_stream(BaseTraceExecutor_ptr self) -> FILE *"""
  return _exec_.BaseTraceExecutor_get_error_stream(*args)

def BaseTraceExecutor_set_error_stream(*args) -> "void" :
  """BaseTraceExecutor_set_error_stream(BaseTraceExecutor_ptr self, FILE * error_stream)"""
  return _exec_.BaseTraceExecutor_set_error_stream(*args)

def BaseTraceExecutor_destroy(*args) -> "void" :
  """BaseTraceExecutor_destroy(BaseTraceExecutor_ptr self)"""
  return _exec_.BaseTraceExecutor_destroy(*args)

def BDDCompleteTraceExecutor_create(*args) -> "BDDCompleteTraceExecutor_ptr" :
  """BDDCompleteTraceExecutor_create(BddFsm_ptr const fsm, BddEnc_ptr const enc) -> BDDCompleteTraceExecutor_ptr"""
  return _exec_.BDDCompleteTraceExecutor_create(*args)

def BDDPartialTraceExecutor_create(*args) -> "BDDPartialTraceExecutor_ptr" :
  """BDDPartialTraceExecutor_create(BddFsm_ptr const fsm, BddEnc_ptr const enc) -> BDDPartialTraceExecutor_ptr"""
  return _exec_.BDDPartialTraceExecutor_create(*args)

def CompleteTraceExecutor_execute(*args) -> "boolean" :
  """CompleteTraceExecutor_execute(CompleteTraceExecutor_ptr const self, Trace_ptr const trace, int * n_steps) -> boolean"""
  return _exec_.CompleteTraceExecutor_execute(*args)

def PartialTraceExecutor_execute(*args) -> "Trace_ptr" :
  """
    PartialTraceExecutor_execute(PartialTraceExecutor_ptr const self, Trace_ptr const trace, NodeList_ptr const language, 
        int * n_steps) -> Trace_ptr
    """
  return _exec_.PartialTraceExecutor_execute(*args)

def SATCompleteTraceExecutor_create(*args) -> "SATCompleteTraceExecutor_ptr" :
  """SATCompleteTraceExecutor_create(BeFsm_ptr const fsm, BeEnc_ptr const enc, BddEnc_ptr const bdd_enc) -> SATCompleteTraceExecutor_ptr"""
  return _exec_.SATCompleteTraceExecutor_create(*args)

def SATPartialTraceExecutor_create(*args) -> "SATPartialTraceExecutor_ptr" :
  """SATPartialTraceExecutor_create(BeFsm_ptr const fsm, BeEnc_ptr const enc, BddEnc_ptr const bdd_enc, boolean use_restart) -> SATPartialTraceExecutor_ptr"""
  return _exec_.SATPartialTraceExecutor_create(*args)
BDD_EXEC_ENGINE = _exec_.BDD_EXEC_ENGINE
SAT_EXEC_ENGINE = _exec_.SAT_EXEC_ENGINE
EXEC_NONE = _exec_.EXEC_NONE
EXEC_BDD = _exec_.EXEC_BDD
EXEC_SAT = _exec_.EXEC_SAT
EXEC_RESERVED = _exec_.EXEC_RESERVED

def bddPartialTraceExecutor2partialTraceExecutor(*args) -> "PartialTraceExecutor_ptr" :
  """bddPartialTraceExecutor2partialTraceExecutor(BDDPartialTraceExecutor_ptr ptr) -> PartialTraceExecutor_ptr"""
  return _exec_.bddPartialTraceExecutor2partialTraceExecutor(*args)

def bddCompleteTraceExecutor2completeTraceExecutor(*args) -> "CompleteTraceExecutor_ptr" :
  """bddCompleteTraceExecutor2completeTraceExecutor(BDDCompleteTraceExecutor_ptr ptr) -> CompleteTraceExecutor_ptr"""
  return _exec_.bddCompleteTraceExecutor2completeTraceExecutor(*args)
# This file is compatible with both classic and new-style classes.


